# coding: utf-8

"""
    Asterisk-LA API

    Asterisk LA connector internal  # noqa: E501

    OpenAPI spec version: 1.0.1
    Contact: support@qualityunit.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from liveagent_calls_internal_api.api_client import ApiClient


class CallsInternalApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def call_blind_transfer(self, call_id, channel_id, to_number, **kwargs):  # noqa: E501
        """Blind transfer call to different number  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.call_blind_transfer(call_id, channel_id, to_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str call_id: (required)
        :param str channel_id: channel ID (required)
        :param str to_number: transfer to number (required)
        :return: OkResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.call_blind_transfer_with_http_info(call_id, channel_id, to_number, **kwargs)  # noqa: E501
        else:
            (data) = self.call_blind_transfer_with_http_info(call_id, channel_id, to_number, **kwargs)  # noqa: E501
            return data

    def call_blind_transfer_with_http_info(self, call_id, channel_id, to_number, **kwargs):  # noqa: E501
        """Blind transfer call to different number  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.call_blind_transfer_with_http_info(call_id, channel_id, to_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str call_id: (required)
        :param str channel_id: channel ID (required)
        :param str to_number: transfer to number (required)
        :return: OkResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['call_id', 'channel_id', 'to_number']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method call_blind_transfer" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'call_id' is set
        if self.api_client.client_side_validation and ('call_id' not in params or
                                                       params['call_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `call_id` when calling `call_blind_transfer`")  # noqa: E501
        # verify the required parameter 'channel_id' is set
        if self.api_client.client_side_validation and ('channel_id' not in params or
                                                       params['channel_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `channel_id` when calling `call_blind_transfer`")  # noqa: E501
        # verify the required parameter 'to_number' is set
        if self.api_client.client_side_validation and ('to_number' not in params or
                                                       params['to_number'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `to_number` when calling `call_blind_transfer`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'call_id' in params:
            path_params['callId'] = params['call_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'channel_id' in params:
            form_params.append(('channel_id', params['channel_id']))  # noqa: E501
        if 'to_number' in params:
            form_params.append(('to_number', params['to_number']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/call/{callId}/_blind_transfer', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OkResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def call_cancel_create(self, call_id, **kwargs):  # noqa: E501
        """Cancel outgoing call (before the agent initiated it on external device)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.call_cancel_create(call_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str call_id: (required)
        :return: OkResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.call_cancel_create_with_http_info(call_id, **kwargs)  # noqa: E501
        else:
            (data) = self.call_cancel_create_with_http_info(call_id, **kwargs)  # noqa: E501
            return data

    def call_cancel_create_with_http_info(self, call_id, **kwargs):  # noqa: E501
        """Cancel outgoing call (before the agent initiated it on external device)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.call_cancel_create_with_http_info(call_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str call_id: (required)
        :return: OkResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['call_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method call_cancel_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'call_id' is set
        if self.api_client.client_side_validation and ('call_id' not in params or
                                                       params['call_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `call_id` when calling `call_cancel_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'call_id' in params:
            form_params.append(('callId', params['call_id']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/call/_cancelStart', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OkResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def call_create(self, to_number, device_type, device_number, device_params, call_id, **kwargs):  # noqa: E501
        """Originate new call  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.call_create(to_number, device_type, device_number, device_params, call_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str to_number: callee number (required)
        :param str device_type: A - LiveAgent phone app, S - SIP phone, E - Phone connected to PSTN, W - Web browser device, R - SIP provider extension (required)
        :param str device_number: device number (required)
        :param str device_params: device params (required)
        :param str call_id: call id (required)
        :param str trunk: trunk id
        :param str ticket_id: ticket id or code
        :param str device_trunk_id: device trunk id (for dialing PSTN phone device)
        :return: Call
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.call_create_with_http_info(to_number, device_type, device_number, device_params, call_id, **kwargs)  # noqa: E501
        else:
            (data) = self.call_create_with_http_info(to_number, device_type, device_number, device_params, call_id, **kwargs)  # noqa: E501
            return data

    def call_create_with_http_info(self, to_number, device_type, device_number, device_params, call_id, **kwargs):  # noqa: E501
        """Originate new call  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.call_create_with_http_info(to_number, device_type, device_number, device_params, call_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str to_number: callee number (required)
        :param str device_type: A - LiveAgent phone app, S - SIP phone, E - Phone connected to PSTN, W - Web browser device, R - SIP provider extension (required)
        :param str device_number: device number (required)
        :param str device_params: device params (required)
        :param str call_id: call id (required)
        :param str trunk: trunk id
        :param str ticket_id: ticket id or code
        :param str device_trunk_id: device trunk id (for dialing PSTN phone device)
        :return: Call
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['to_number', 'device_type', 'device_number', 'device_params', 'call_id', 'trunk', 'ticket_id', 'device_trunk_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method call_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'to_number' is set
        if self.api_client.client_side_validation and ('to_number' not in params or
                                                       params['to_number'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `to_number` when calling `call_create`")  # noqa: E501
        # verify the required parameter 'device_type' is set
        if self.api_client.client_side_validation and ('device_type' not in params or
                                                       params['device_type'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `device_type` when calling `call_create`")  # noqa: E501
        # verify the required parameter 'device_number' is set
        if self.api_client.client_side_validation and ('device_number' not in params or
                                                       params['device_number'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `device_number` when calling `call_create`")  # noqa: E501
        # verify the required parameter 'device_params' is set
        if self.api_client.client_side_validation and ('device_params' not in params or
                                                       params['device_params'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `device_params` when calling `call_create`")  # noqa: E501
        # verify the required parameter 'call_id' is set
        if self.api_client.client_side_validation and ('call_id' not in params or
                                                       params['call_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `call_id` when calling `call_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'to_number' in params:
            form_params.append(('to_number', params['to_number']))  # noqa: E501
        if 'trunk' in params:
            form_params.append(('trunk', params['trunk']))  # noqa: E501
        if 'device_type' in params:
            form_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'device_number' in params:
            form_params.append(('device_number', params['device_number']))  # noqa: E501
        if 'device_params' in params:
            form_params.append(('device_params', params['device_params']))  # noqa: E501
        if 'call_id' in params:
            form_params.append(('call_id', params['call_id']))  # noqa: E501
        if 'ticket_id' in params:
            form_params.append(('ticketId', params['ticket_id']))  # noqa: E501
        if 'device_trunk_id' in params:
            form_params.append(('device_trunk_id', params['device_trunk_id']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/call/_start', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Call',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def call_status(self, call_id, **kwargs):  # noqa: E501
        """Return the status of call  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.call_status(call_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str call_id: (required)
        :return: Call
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.call_status_with_http_info(call_id, **kwargs)  # noqa: E501
        else:
            (data) = self.call_status_with_http_info(call_id, **kwargs)  # noqa: E501
            return data

    def call_status_with_http_info(self, call_id, **kwargs):  # noqa: E501
        """Return the status of call  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.call_status_with_http_info(call_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str call_id: (required)
        :return: Call
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['call_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method call_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'call_id' is set
        if self.api_client.client_side_validation and ('call_id' not in params or
                                                       params['call_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `call_id` when calling `call_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'call_id' in params:
            path_params['callId'] = params['call_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/call/{callId}/_status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Call',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def call_transfer(self, call_id, to_number, first_channel_id, **kwargs):  # noqa: E501
        """Transfer call to different number  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.call_transfer(call_id, to_number, first_channel_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str call_id: (required)
        :param str to_number: to number (required)
        :param str first_channel_id: first channel ID (required)
        :return: OkResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.call_transfer_with_http_info(call_id, to_number, first_channel_id, **kwargs)  # noqa: E501
        else:
            (data) = self.call_transfer_with_http_info(call_id, to_number, first_channel_id, **kwargs)  # noqa: E501
            return data

    def call_transfer_with_http_info(self, call_id, to_number, first_channel_id, **kwargs):  # noqa: E501
        """Transfer call to different number  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.call_transfer_with_http_info(call_id, to_number, first_channel_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str call_id: (required)
        :param str to_number: to number (required)
        :param str first_channel_id: first channel ID (required)
        :return: OkResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['call_id', 'to_number', 'first_channel_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method call_transfer" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'call_id' is set
        if self.api_client.client_side_validation and ('call_id' not in params or
                                                       params['call_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `call_id` when calling `call_transfer`")  # noqa: E501
        # verify the required parameter 'to_number' is set
        if self.api_client.client_side_validation and ('to_number' not in params or
                                                       params['to_number'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `to_number` when calling `call_transfer`")  # noqa: E501
        # verify the required parameter 'first_channel_id' is set
        if self.api_client.client_side_validation and ('first_channel_id' not in params or
                                                       params['first_channel_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `first_channel_id` when calling `call_transfer`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'call_id' in params:
            path_params['callId'] = params['call_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'to_number' in params:
            form_params.append(('to_number', params['to_number']))  # noqa: E501
        if 'first_channel_id' in params:
            form_params.append(('first_channel_id', params['first_channel_id']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/call/{callId}/_transfer', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OkResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def call_transfer_refer(self, call_id, to_number, first_channel_id, **kwargs):  # noqa: E501
        """Transfer call to different number by refer  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.call_transfer_refer(call_id, to_number, first_channel_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str call_id: (required)
        :param str to_number: to number (required)
        :param str first_channel_id: first channel ID (required)
        :return: OkResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.call_transfer_refer_with_http_info(call_id, to_number, first_channel_id, **kwargs)  # noqa: E501
        else:
            (data) = self.call_transfer_refer_with_http_info(call_id, to_number, first_channel_id, **kwargs)  # noqa: E501
            return data

    def call_transfer_refer_with_http_info(self, call_id, to_number, first_channel_id, **kwargs):  # noqa: E501
        """Transfer call to different number by refer  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.call_transfer_refer_with_http_info(call_id, to_number, first_channel_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str call_id: (required)
        :param str to_number: to number (required)
        :param str first_channel_id: first channel ID (required)
        :return: OkResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['call_id', 'to_number', 'first_channel_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method call_transfer_refer" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'call_id' is set
        if self.api_client.client_side_validation and ('call_id' not in params or
                                                       params['call_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `call_id` when calling `call_transfer_refer`")  # noqa: E501
        # verify the required parameter 'to_number' is set
        if self.api_client.client_side_validation and ('to_number' not in params or
                                                       params['to_number'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `to_number` when calling `call_transfer_refer`")  # noqa: E501
        # verify the required parameter 'first_channel_id' is set
        if self.api_client.client_side_validation and ('first_channel_id' not in params or
                                                       params['first_channel_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `first_channel_id` when calling `call_transfer_refer`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'call_id' in params:
            path_params['callId'] = params['call_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'to_number' in params:
            form_params.append(('to_number', params['to_number']))  # noqa: E501
        if 'first_channel_id' in params:
            form_params.append(('first_channel_id', params['first_channel_id']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/call/{callId}/_transfer_refer', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OkResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def dtmf_channel(self, call_id, channel_id, dtmf, **kwargs):  # noqa: E501
        """Send provided DTMF to channel  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dtmf_channel(call_id, channel_id, dtmf, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str call_id: (required)
        :param str channel_id: (required)
        :param str dtmf: DTMF To send (required)
        :return: OkResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.dtmf_channel_with_http_info(call_id, channel_id, dtmf, **kwargs)  # noqa: E501
        else:
            (data) = self.dtmf_channel_with_http_info(call_id, channel_id, dtmf, **kwargs)  # noqa: E501
            return data

    def dtmf_channel_with_http_info(self, call_id, channel_id, dtmf, **kwargs):  # noqa: E501
        """Send provided DTMF to channel  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dtmf_channel_with_http_info(call_id, channel_id, dtmf, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str call_id: (required)
        :param str channel_id: (required)
        :param str dtmf: DTMF To send (required)
        :return: OkResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['call_id', 'channel_id', 'dtmf']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method dtmf_channel" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'call_id' is set
        if self.api_client.client_side_validation and ('call_id' not in params or
                                                       params['call_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `call_id` when calling `dtmf_channel`")  # noqa: E501
        # verify the required parameter 'channel_id' is set
        if self.api_client.client_side_validation and ('channel_id' not in params or
                                                       params['channel_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `channel_id` when calling `dtmf_channel`")  # noqa: E501
        # verify the required parameter 'dtmf' is set
        if self.api_client.client_side_validation and ('dtmf' not in params or
                                                       params['dtmf'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `dtmf` when calling `dtmf_channel`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'call_id' in params:
            path_params['callId'] = params['call_id']  # noqa: E501
        if 'channel_id' in params:
            path_params['channelId'] = params['channel_id']  # noqa: E501

        query_params = []
        if 'dtmf' in params:
            query_params.append(('dtmf', params['dtmf']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/call/{callId}/channels/{channelId}/_dtmf', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OkResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def end_channel(self, call_id, channel_id, **kwargs):  # noqa: E501
        """End channel  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.end_channel(call_id, channel_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str call_id: (required)
        :param str channel_id: (required)
        :return: OkResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.end_channel_with_http_info(call_id, channel_id, **kwargs)  # noqa: E501
        else:
            (data) = self.end_channel_with_http_info(call_id, channel_id, **kwargs)  # noqa: E501
            return data

    def end_channel_with_http_info(self, call_id, channel_id, **kwargs):  # noqa: E501
        """End channel  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.end_channel_with_http_info(call_id, channel_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str call_id: (required)
        :param str channel_id: (required)
        :return: OkResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['call_id', 'channel_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method end_channel" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'call_id' is set
        if self.api_client.client_side_validation and ('call_id' not in params or
                                                       params['call_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `call_id` when calling `end_channel`")  # noqa: E501
        # verify the required parameter 'channel_id' is set
        if self.api_client.client_side_validation and ('channel_id' not in params or
                                                       params['channel_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `channel_id` when calling `end_channel`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'call_id' in params:
            path_params['callId'] = params['call_id']  # noqa: E501
        if 'channel_id' in params:
            path_params['channelId'] = params['channel_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/call/{callId}/channels/{channelId}/_end', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OkResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def hold_channel(self, call_id, channel_id, **kwargs):  # noqa: E501
        """Hold channel  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.hold_channel(call_id, channel_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str call_id: (required)
        :param str channel_id: (required)
        :return: OkResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.hold_channel_with_http_info(call_id, channel_id, **kwargs)  # noqa: E501
        else:
            (data) = self.hold_channel_with_http_info(call_id, channel_id, **kwargs)  # noqa: E501
            return data

    def hold_channel_with_http_info(self, call_id, channel_id, **kwargs):  # noqa: E501
        """Hold channel  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.hold_channel_with_http_info(call_id, channel_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str call_id: (required)
        :param str channel_id: (required)
        :return: OkResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['call_id', 'channel_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method hold_channel" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'call_id' is set
        if self.api_client.client_side_validation and ('call_id' not in params or
                                                       params['call_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `call_id` when calling `hold_channel`")  # noqa: E501
        # verify the required parameter 'channel_id' is set
        if self.api_client.client_side_validation and ('channel_id' not in params or
                                                       params['channel_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `channel_id` when calling `hold_channel`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'call_id' in params:
            path_params['callId'] = params['call_id']  # noqa: E501
        if 'channel_id' in params:
            path_params['channelId'] = params['channel_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/call/{callId}/channels/{channelId}/_hold', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OkResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def mute_channel(self, call_id, channel_id, **kwargs):  # noqa: E501
        """Mute channel  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mute_channel(call_id, channel_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str call_id: (required)
        :param str channel_id: (required)
        :return: OkResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.mute_channel_with_http_info(call_id, channel_id, **kwargs)  # noqa: E501
        else:
            (data) = self.mute_channel_with_http_info(call_id, channel_id, **kwargs)  # noqa: E501
            return data

    def mute_channel_with_http_info(self, call_id, channel_id, **kwargs):  # noqa: E501
        """Mute channel  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mute_channel_with_http_info(call_id, channel_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str call_id: (required)
        :param str channel_id: (required)
        :return: OkResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['call_id', 'channel_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method mute_channel" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'call_id' is set
        if self.api_client.client_side_validation and ('call_id' not in params or
                                                       params['call_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `call_id` when calling `mute_channel`")  # noqa: E501
        # verify the required parameter 'channel_id' is set
        if self.api_client.client_side_validation and ('channel_id' not in params or
                                                       params['channel_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `channel_id` when calling `mute_channel`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'call_id' in params:
            path_params['callId'] = params['call_id']  # noqa: E501
        if 'channel_id' in params:
            path_params['channelId'] = params['channel_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/call/{callId}/channels/{channelId}/_mute', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OkResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def unhold_channel(self, call_id, channel_id, **kwargs):  # noqa: E501
        """Unhold channel  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.unhold_channel(call_id, channel_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str call_id: (required)
        :param str channel_id: (required)
        :return: OkResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.unhold_channel_with_http_info(call_id, channel_id, **kwargs)  # noqa: E501
        else:
            (data) = self.unhold_channel_with_http_info(call_id, channel_id, **kwargs)  # noqa: E501
            return data

    def unhold_channel_with_http_info(self, call_id, channel_id, **kwargs):  # noqa: E501
        """Unhold channel  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.unhold_channel_with_http_info(call_id, channel_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str call_id: (required)
        :param str channel_id: (required)
        :return: OkResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['call_id', 'channel_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method unhold_channel" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'call_id' is set
        if self.api_client.client_side_validation and ('call_id' not in params or
                                                       params['call_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `call_id` when calling `unhold_channel`")  # noqa: E501
        # verify the required parameter 'channel_id' is set
        if self.api_client.client_side_validation and ('channel_id' not in params or
                                                       params['channel_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `channel_id` when calling `unhold_channel`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'call_id' in params:
            path_params['callId'] = params['call_id']  # noqa: E501
        if 'channel_id' in params:
            path_params['channelId'] = params['channel_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/call/{callId}/channels/{channelId}/_unhold', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OkResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def unmute_channel(self, call_id, channel_id, **kwargs):  # noqa: E501
        """Unmute channel  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.unmute_channel(call_id, channel_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str call_id: (required)
        :param str channel_id: (required)
        :return: OkResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.unmute_channel_with_http_info(call_id, channel_id, **kwargs)  # noqa: E501
        else:
            (data) = self.unmute_channel_with_http_info(call_id, channel_id, **kwargs)  # noqa: E501
            return data

    def unmute_channel_with_http_info(self, call_id, channel_id, **kwargs):  # noqa: E501
        """Unmute channel  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.unmute_channel_with_http_info(call_id, channel_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str call_id: (required)
        :param str channel_id: (required)
        :return: OkResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['call_id', 'channel_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method unmute_channel" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'call_id' is set
        if self.api_client.client_side_validation and ('call_id' not in params or
                                                       params['call_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `call_id` when calling `unmute_channel`")  # noqa: E501
        # verify the required parameter 'channel_id' is set
        if self.api_client.client_side_validation and ('channel_id' not in params or
                                                       params['channel_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `channel_id` when calling `unmute_channel`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'call_id' in params:
            path_params['callId'] = params['call_id']  # noqa: E501
        if 'channel_id' in params:
            path_params['channelId'] = params['channel_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/call/{callId}/channels/{channelId}/_unmute', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OkResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
